---
title: Hulme History
---
<nav id='menu-ui' class='menu-ui'></nav>

<section id='timeline-section'>
  <div id='timeline'>
    <div id='tl-content'>
      <div id='crossbar'> </div>
      <ol class="decades">
        <% timeline = all_events(1920, 2015) %>
        <% timeline.each do |decade, events| %>
          <li class="decade" value="<%= decade %>">
            <time class="decade"><%= decade %></time>
            <% if events.length > 0 %>
              <ol class="events">
              <% events.sort_by{|event| event.metadata[:page]["start"]}.each do |event| %>
                <% md = event.metadata[:page] %>
                <li class="event item block <%= md["timeline"] %>"
                    lat="<%=md['lat']%>"
                    lng="<%=md['lng']%>"
                    data="<%=event.path.split('/')[-1].split('.')[0]%>"
                    value="<%= md["start"] %>">
                    <strong><%= md["title"] %></strong><%= ". " + md["desc"] if md["desc"] %>
                </li>
              <% end %>
              </ol>
            <% end %>
          </li>
        <% end %>
      </ol>
    </div>
  </div>
  <div id='listholder'>
    <ol class="button-group">
    </ol>
  </div>
</section>

<section id='map'></section>

<script>
// SET PANNING RANGE HERE
var northeast = L.latLng(53.495634,-2.32168);
var southwest = L.latLng(53.455451,-2.223401);

if(southwest && northeast) {
  bounds = L.latLngBounds(southwest, northeast);
} else {
  bounds = null;
}

L.mapbox.accessToken = 'pk.eyJ1Ijoia2ltYWRhY3R5bCIsImEiOiJCYzdNTTR3In0.hkjyGpEFYdSPrVp3e717eA';
var map = L.map('map', {
  center: [53.468,-2.260],
  minZoom: 15,
  zoom:15,
  maxZoon: 19,
  maxBounds: bounds
});

  // { maxBounds: bounds,
  //   maxZoom:19,
  //   minZoom:11
  // });
var layers = document.getElementById('menu-ui');

// Colour defs
var buildings = "#7FBB71";
var blocks = "#CDCCCC";

// Base map
addLayer(L.mapbox.tileLayer('mapbox.light'), 'Base Map', 1);

// 1871 map layers
var group1871 = L.layerGroup();
addLayer(group1871, '1871', 2);
// Async load so that the styles work properly for now.
// Later we can edit the style info in the geojson directly.
$.getJSON('./gis/1871_figure_ground.geojson', function(data) {
  l = L.mapbox.featureLayer(data);
  l.addTo(group1871);
  l.setStyle({fillColor: buildings});
});

$.getJSON('./gis/1871_blocks.geojson', function(data) {
  l = L.mapbox.featureLayer(data);
  l.addTo(group1871);
  l.setStyle({fillColor: blocks});
});


// 1990 map layers
var group1990 = L.layerGroup();
//addLayer(group1990, '1990', 3);

$.getJSON('./gis/1990_figure_ground.geojson', function(data) {
  l = L.mapbox.featureLayer(data);
  l.addTo(group1990);
  l.setStyle({fillColor: buildings});
});

$.getJSON('./gis/1990_blocks.geojson', function(data) {
  l = L.mapbox.featureLayer(data);
  l.addTo(group1990);
  l.setStyle({fillColor: blocks});
});

// 2015 layers
var group2015 = L.layerGroup();
//addLayer(group2015, '2015', 4);

$.getJSON('./gis/2015_blocks.geojson', function(data) {
  l = L.mapbox.featureLayer(data);
  l.addTo(group2015);
  l.setStyle({fillColor: blocks});
});

//
map.present = group1871;

map.update = function() {
  current_year = parseInt($(".event.active").attr('value'));

  // Pick the appropriate map
  if(current_year < 1970){
    new_map = group1871;
  } else if(current_year < 1994) {
    new_map = group1990;
  } else {
    new_map = group2015;
  }

  // Do we need to change it?
  if(new_map != map.present){
    // map.present
    //     .getLayers()
    //     .forEach(function(l){
    //       // mess around with fading layer and then removing asynchronously.
    //       l.setStyle({'opacity':0});
    //     })
    if(map.hasLayer(map.present)){
      map.removeLayer(map.present);
    }

    // Perhaps similarly mess with fade in. If fade out and in async, should dissolve.
    map.present = new_map;
    map.addLayer(new_map);
  }
}

function addLayer(layer, name, zIndex) {
  layer
  .setZIndex(zIndex)
  .addTo(map);

  // Create a simple layer switcher that
  // toggles layers on and off.
  var link = document.createElement('a');
  link.href = '#';
  link.className = 'active';
  link.innerHTML = name;

  link.onclick = function(e) {
    e.preventDefault();
    e.stopPropagation();

    if (map.hasLayer(layer)) {
      map.removeLayer(layer);
      this.className = '';
    } else {
      map.addLayer(layer);
      this.className = 'active';
    }
  };

  layers.appendChild(link);
}
$('#timeline').mousedown(timeline_mousedown);

$('#tl-content').scroll(timeline_scroll)

$("li.event.item").each(function(){
  this.activate = function(){
    elem = this;
    $(elem).addClass("active");
    setTimeout(function(){
      // check if class is still active rather than just scrolling through.
      if (elem.classList.contains("active")){
        var attrs = elem.attributes;
        var lat = attrs['lat'].value;
        var lng = attrs['lng'].value;
        var data = attrs['data'].value;

        if(elem.popup){
          elem.popup.addTo(map);
        } else {
          if (lat && lat != "") {
            var latlng = new L.latLng(parseFloat(lat),
                              parseFloat(lng))
            elem.popup = popup_text(elem.getAttribute('data'),latlng)
            map.panTo(latlng);
          }
        }
        // Set up magnific
        var more_info_link = $(".event-"+data);
        if(more_info_link.length > 0){
          var res = overlay_res['events/'+data+'/'].resources;
          more_info_link.magnificPopup({
            items:overlay_res['events/'+data+'/'].resources,
            gallery: {
              enabled: true
            },
            type: 'image'
          });
        }

        if(!elem.gjobject && overlay_res['events/' + data + '/']) {
          geojson_popup(data);
        } else if (elem.gjobject ) {
          elem.gjobject.addTo(map);
        }
        // var midline = elem.offsetTop + elem.offsetHeight/2 - $("#crossbar").height();

        // // Sticky mode crossbar See timeline.js selecta() for smooth mode crossbar.
        // $("#crossbar").stop()
        //               .animate({top:midline, duration: 'fast'});
      }
    }, 500);
  }
  this.deactivate = function(){
    $(this).removeClass("active");
    // TODO: Eliminate auld popups!
    if(this.popup) {
      map.closePopup(this.popup); // Bad using private functions. Leaflet doesn't provide a cleanup function!
    }
    if(this.gjobject) {
      // remove geojson object layer
      map.removeLayer(this.gjobject);
    }
  }
});

$("li.event").click(function(){
  // fixme: maths is wrong.
  var scroll = s_p_inv(this.offsetTop);
  $("#tl-content").animate({scrollTop:scroll});
})

$(document).ready(function(){
  // taking string from internet route. Sanitise thoroughly.
  var target = window.location.hash.replace(/([^a-zA-Z\-\d])/g, '');
  $('[data="'+target+'"]')[0].click();
})

</script>
